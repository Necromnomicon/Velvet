/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


/* key assignments
  0  1  2  3  4       5  6  7  8  9
  10 11 12 13 14      15 16 17 18 19
  20 21 22 23 24      25 26 27 28 29
     30 31 32 33      34 35 36 37
*/

#define ALPHA 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4
#define GAME 5
#define GAME2 6
#define MOU 7

#define U_MOUSE_MOVE_MAX 1800                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
	time-to-max-speed-ms = <400>;             /* <--- How long time until max speed is reached (default: 500) */
};

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers; //allows for calum-style modifers 
};



  
/ { 
  combos {
        #include "combos.dtsi"    //this directs to a list of combos
    };
   
        //this gives quick relese to any sticky key if it's labled &skq 
   behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <300>;
        quick-release;
        };
    };
		//makes shift + period an exclimation mark
	behaviors {
		dot_excl: dot_excl {
			compatible = "zmk,behavior-mod-morph";
			label = "dot_excl";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp EXCL>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};
};    



/{
        keymap {
                compatible = "zmk,keymap";
                
       		alpha_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P &kp B 						&kp J &kp L &kp U &kp Y &kp APOS 
		&kp A &kp R &kp S &kp T &kp G 			        	&kp M &kp N &kp E &kp I &lt MOU O
		&kp Z &kp X &kp C &kp D &kp V				        &kp K &kp H &kp COMMA  &dot_excl &kp SLASH
          	&none &none	&sl NUM &skq LSHFT                  &lt SYM SPC &sl NAV &none &none
		>;
		};

       		nav_layer {
		bindings = <
        &kp PG_UP   &kp HOME  &kp UP    &kp END    &kp C_VOL_UP       &none &none &none &none &none
        &kp PG_DN   &kp LEFT  &kp DOWN  &kp RIGHT  &kp C_VOL_DN       &none &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI 
        &kp LC(Z)   &kp LC(X) &kp LC(C) &kp LC(V)  &kp K_APP          &none &none &none &none &none
                          &none &none  &none &skq LSHFT        &skq LS(LC(LALT)) &trans &none &none
        >;
		};
		
		    num_layer {
		bindings = <
		&kp TAB   &kp BSPC  &kp DEL    &kp DLLR    &kp PRCNT   	            	&kp EQUAL  &kp N7 &kp N8 &kp N9 &kp COMMA 
		&sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT   &kp LC(G) 					&kp PLUS   &kp N4 &kp N5 &kp N6 &kp ASTRK
		&kp LC(Z) &kp LC(X) &kp LC(C)  &kp LC(V)   &kp K_APP  		       		&kp MINUS  &kp N1 &kp N2 &kp N3 &kp SLASH
					        &none &none &trans &skq LS(LC(LALT))            &kp N0  &kp DOT &none &none
		>;
		};	
		
		    sym_layer {
		bindings = <
		&kp ESC   &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    	&kp EQUAL  &kp LC(LEFT)  &kp CARET &kp LC(RIGHT) &none 
		&kp GRAVE &kp LBKT  &kp LBRC  &kp LPAR  &kp LT 	        &kp PLUS   &kp AMPS      &kp ASTRK &kp COLON     &kp SEMI
		&kp TILDE &kp RBKT  &kp RBRC  &kp RPAR  &kp GT   		&kp MINUS  &kp UNDER     &kp BSLH  &kp PIPE      &kp SLASH
					&none &none  &trans  &sl FUN      	       &trans &trans  &none &none
		>;
		};	

            fun_layer {
		bindings = <
		&bt BT_CLR   &none        &none        &none        &none    		 &none       &kp F7  &kp F8  &kp F9 &kp F10
		&sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &reset           &reset      &kp F4  &kp F5  &kp F6 &kp F11
		&bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bootloader      &bootloader &kp F1  &kp F2  &kp F3 &kp F12  
					   &none &none  &none &none                   		    &none &none &none &none
		>;
		};
    
            game_layer {
		bindings = <
		&kp TAB   &kp Q  &kp W  &kp E  &kp R 					    &kp Y &kp U &kp I &kp O &kp P 
		&kp LCTRL &kp A  &kp S  &kp D  &kp F 			        	&kp H &kp J &kp K &kp L &kp RET
		&kp LSHFT &kp Z  &kp X  &kp C  &kp V				        &kp B &kp N &kp M &kp SLASH &kp ESC
          	&none &none &sl GAME2 &kp SPACE                   &kp LCTRL &kp LSHIFT &none &none
		>;
		};

            game2_layer {
		bindings = <
		&kp N6    &kp N7 &kp N8 &kp N9 &kp N0						&kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
		&kp N1    &kp N2 &kp N3 &kp N4 &kp N5			        	&kp F1 &kp F2 &kp F3 &kp F4 &kp F5
		&sk LALT  &kp T  &kp G  &kp B  &kp M 				        &kp F11 &kp F12 &kp COMMA &kp DOT &kp SLASH
          	        &none &none &trans &kp SPACE                 &kp SPC &kp ESC &none &none
		>;
		};

       		mou_layer {
		bindings = <
        &mwh SCROLL_UP   &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT &kp BSPC       &none 		&none 	   &none 	 &none 		&none 
        &mwh SCROLL_DOWN   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT 	 &kp DEL      &none  &sk RSHFT  &sk RCTRL 	&sk RALT   &sk RGUI 
        &kp LC(Z)   &kp LC(X) &kp LC(C) &kp LC(V)  &kp LC(F)          					 &none 	&mkp MCLK  &kp RC(TAB)	&kp LS(LC(TAB)) &none 
                         &none &none  &skq LCTRL   &skq LSHFT             		&mkp LCLK  &mkp RCLK &none &none
        >;
		};
	};
};
